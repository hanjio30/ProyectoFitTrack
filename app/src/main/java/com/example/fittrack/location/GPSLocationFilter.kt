package com.example.fittrack.location

import android.location.Location
import android.util.Log
import com.google.android.gms.maps.model.LatLng
import kotlin.math.*

class GPSLocationFilter {

    private val TAG = "GPSLocationFilter"

    // ‚úÖ CONFIGURACI√ìN MEJORADA PARA EVITAR L√çNEAS RARAS
    private val MIN_ACCURACY = 15f // metros - m√°s estricto para mejor precisi√≥n
    private val MIN_DISTANCE_THRESHOLD = 8f // metros - distancia m√≠nima m√°s grande
    private val MAX_SPEED_THRESHOLD = 30f // km/h - m√°s conservador para caminata/correr
    private val MIN_TIME_INTERVAL = 3000L // ms - intervalo m√°s largo (3 segundos)
    private val STATIONARY_RADIUS = 12f // metros - radio m√°s grande para detectar cuando est√°s parado
    private val SIGNIFICANT_MOVEMENT_DISTANCE = 15f // metros - distancia que realmente indica movimiento

    // ‚úÖ NUEVOS PAR√ÅMETROS PARA FILTRO AVANZADO
    private val MAX_ACCURACY_FOR_FIRST_LOCATION = 10f // Primera ubicaci√≥n debe ser muy precisa
    private val SMOOTHING_WINDOW_SIZE = 3 // Ventana para promedio m√≥vil
    private val MIN_CONSECUTIVE_VALID_READINGS = 3 // Lecturas consecutivas antes de aceptar movimiento

    private var lastValidLocation: Location? = null
    private var lastUpdateTime = 0L
    private var consecutiveStationaryCount = 0
    private val maxStationaryCount = 8 // M√°s lecturas antes de considerar movimiento

    // ‚úÖ NUEVO: Buffer para promedio m√≥vil
    private val locationBuffer = mutableListOf<Location>()
    private var consecutiveValidReadings = 0
    private var totalRejectedReadings = 0

    fun filterLocation(newLocation: Location): FilterResult {
        val currentTime = System.currentTimeMillis()
        totalRejectedReadings++ // Contador total

        Log.d(TAG, "=== ANALIZANDO NUEVA UBICACI√ìN ===")
        Log.d(TAG, "Lat: ${newLocation.latitude}, Lng: ${newLocation.longitude}")
        Log.d(TAG, "Precisi√≥n: ${newLocation.accuracy}m")

        // 1. ‚úÖ FILTRO DE PRECISI√ìN M√ÅS ESTRICTO
        if (!newLocation.hasAccuracy()) {
            Log.d(TAG, "‚ùå Rechazado: Sin informaci√≥n de precisi√≥n")
            return FilterResult.REJECTED_LOW_ACCURACY
        }

        val lastLocation = lastValidLocation
        val requiredAccuracy = if (lastLocation == null) MAX_ACCURACY_FOR_FIRST_LOCATION else MIN_ACCURACY

        if (newLocation.accuracy > requiredAccuracy) {
            Log.d(TAG, "‚ùå Rechazado: Baja precisi√≥n (${newLocation.accuracy}m > ${requiredAccuracy}m)")
            return FilterResult.REJECTED_LOW_ACCURACY
        }

        // 2. ‚úÖ FILTRO DE TIEMPO M√ÅS ESTRICTO
        if (currentTime - lastUpdateTime < MIN_TIME_INTERVAL) {
            Log.d(TAG, "‚ùå Rechazado: Intervalo muy corto (${currentTime - lastUpdateTime}ms < ${MIN_TIME_INTERVAL}ms)")
            return FilterResult.REJECTED_TIME_INTERVAL
        }

        // 3. ‚úÖ PRIMERA UBICACI√ìN - VALIDACI√ìN ESPECIAL
        if (lastLocation == null) {
            Log.d(TAG, "üéØ Primera ubicaci√≥n - validaci√≥n especial")

            // Para la primera ubicaci√≥n, ser muy exigente
            if (newLocation.accuracy <= MAX_ACCURACY_FOR_FIRST_LOCATION) {
                lastValidLocation = newLocation
                lastUpdateTime = currentTime
                consecutiveStationaryCount = 0
                consecutiveValidReadings = 1
                locationBuffer.clear()
                locationBuffer.add(newLocation)
                totalRejectedReadings = 0

                Log.d(TAG, "‚úÖ Primera ubicaci√≥n ACEPTADA (precisi√≥n: ${newLocation.accuracy}m)")
                return FilterResult.ACCEPTED_FIRST_LOCATION
            } else {
                Log.d(TAG, "‚ùå Primera ubicaci√≥n rechazada - precisi√≥n insuficiente")
                return FilterResult.REJECTED_LOW_ACCURACY
            }
        }

        // 4. ‚úÖ AN√ÅLISIS DE DISTANCIA Y MOVIMIENTO
        val distance = calculateDistance(lastLocation, newLocation)
        val timeElapsed = (currentTime - lastUpdateTime) / 1000f
        val speed = if (timeElapsed > 0) (distance / timeElapsed) * 3.6f else 0f

        Log.d(TAG, "Distancia: ${String.format("%.2f", distance)}m")
        Log.d(TAG, "Velocidad: ${String.format("%.2f", speed)} km/h")
        Log.d(TAG, "Tiempo transcurrido: ${String.format("%.1f", timeElapsed)}s")

        // 5. ‚úÖ FILTRO DE VELOCIDAD IMPOSIBLE
        if (speed > MAX_SPEED_THRESHOLD) {
            Log.d(TAG, "‚ùå Rechazado: Velocidad imposible (${String.format("%.2f", speed)} km/h)")
            consecutiveValidReadings = 0
            return FilterResult.REJECTED_HIGH_SPEED
        }

        // 6. ‚úÖ DETECCI√ìN MEJORADA DE USUARIO ESTACIONARIO
        if (distance <= STATIONARY_RADIUS) {
            consecutiveStationaryCount++
            Log.d(TAG, "üö∂ Posible usuario estacionario (${consecutiveStationaryCount}/${maxStationaryCount})")

            if (consecutiveStationaryCount >= maxStationaryCount) {
                Log.d(TAG, "‚ùå Rechazado: Usuario confirmado como estacionario")
                consecutiveValidReadings = 0
                return FilterResult.REJECTED_STATIONARY
            }
        } else {
            // Solo resetear si el movimiento es significativo
            if (distance >= SIGNIFICANT_MOVEMENT_DISTANCE) {
                consecutiveStationaryCount = 0
                Log.d(TAG, "üèÉ Movimiento significativo detectado - reseteando contador estacionario")
            }
        }

        // 7. ‚úÖ FILTRO DE DISTANCIA M√çNIMA MEJORADO
        if (distance < MIN_DISTANCE_THRESHOLD) {
            Log.d(TAG, "‚ùå Rechazado: Distancia muy peque√±a (${String.format("%.2f", distance)}m)")
            consecutiveValidReadings = 0
            return FilterResult.REJECTED_SMALL_DISTANCE
        }

        // 8. ‚úÖ REQUERIR LECTURAS CONSECUTIVAS V√ÅLIDAS
        consecutiveValidReadings++
        if (consecutiveValidReadings < MIN_CONSECUTIVE_VALID_READINGS) {
            Log.d(TAG, "‚è≥ Esperando m√°s lecturas v√°lidas (${consecutiveValidReadings}/${MIN_CONSECUTIVE_VALID_READINGS})")
            return FilterResult.REJECTED_SMALL_DISTANCE
        }

        // 9. ‚úÖ APLICAR PROMEDIO M√ìVIL PARA SUAVIZAR
        locationBuffer.add(newLocation)
        if (locationBuffer.size > SMOOTHING_WINDOW_SIZE) {
            locationBuffer.removeAt(0)
        }

        val smoothedLocation = if (locationBuffer.size >= 2) {
            calculateMovingAverage(locationBuffer)
        } else {
            newLocation
        }

        // 10. ‚úÖ VALIDACI√ìN FINAL CON LA UBICACI√ìN SUAVIZADA
        val finalDistance = calculateDistance(lastLocation, smoothedLocation)
        if (finalDistance < MIN_DISTANCE_THRESHOLD) {
            Log.d(TAG, "‚ùå Rechazado: Distancia suavizada muy peque√±a (${String.format("%.2f", finalDistance)}m)")
            return FilterResult.REJECTED_SMALL_DISTANCE
        }

        // ‚úÖ UBICACI√ìN ACEPTADA
        lastValidLocation = smoothedLocation
        lastUpdateTime = currentTime
        totalRejectedReadings = 0 // Reset contador de rechazos

        Log.d(TAG, "‚úÖ UBICACI√ìN ACEPTADA Y SUAVIZADA")
        Log.d(TAG, "Distancia final: ${String.format("%.2f", finalDistance)}m")
        Log.d(TAG, "Lecturas v√°lidas consecutivas: $consecutiveValidReadings")

        return FilterResult.ACCEPTED_AND_SMOOTHED(smoothedLocation)
    }

    // ‚úÖ NUEVO: C√°lculo de promedio m√≥vil para suavizar ubicaciones
    private fun calculateMovingAverage(locations: List<Location>): Location {
        if (locations.isEmpty()) return locations.last()

        var totalLat = 0.0
        var totalLng = 0.0
        var totalWeight = 0.0

        // Dar m√°s peso a las ubicaciones m√°s recientes
        locations.forEachIndexed { index, location ->
            val weight = (index + 1).toDouble() // Peso creciente
            totalLat += location.latitude * weight
            totalLng += location.longitude * weight
            totalWeight += weight
        }

        val avgLocation = Location(locations.last().provider)
        avgLocation.latitude = totalLat / totalWeight
        avgLocation.longitude = totalLng / totalWeight
        avgLocation.accuracy = locations.last().accuracy
        avgLocation.time = locations.last().time

        // Mantener otros atributos de la ubicaci√≥n m√°s reciente
        val lastLocation = locations.last()
        if (lastLocation.hasAltitude()) {
            avgLocation.altitude = lastLocation.altitude
        }
        if (lastLocation.hasBearing()) {
            avgLocation.bearing = lastLocation.bearing
        }
        if (lastLocation.hasSpeed()) {
            avgLocation.speed = lastLocation.speed
        }

        return avgLocation
    }

    private fun calculateDistance(loc1: Location, loc2: Location): Float {
        val results = FloatArray(1)
        Location.distanceBetween(
            loc1.latitude, loc1.longitude,
            loc2.latitude, loc2.longitude,
            results
        )
        return results[0]
    }

    fun reset() {
        lastValidLocation = null
        lastUpdateTime = 0L
        consecutiveStationaryCount = 0
        consecutiveValidReadings = 0
        totalRejectedReadings = 0
        locationBuffer.clear()
        Log.d(TAG, "üîÑ Filtro GPS reiniciado completamente")
    }

    fun getCurrentLocation(): Location? = lastValidLocation

    fun isUserMoving(): Boolean = consecutiveStationaryCount < maxStationaryCount

    fun locationToLatLng(location: Location): LatLng {
        return LatLng(location.latitude, location.longitude)
    }

    // ‚úÖ ESTAD√çSTICAS MEJORADAS
    fun getFilterStats(): String {
        return buildString {
            append("=== GPS FILTER STATS ===\n")
            append("üìç √öltima ubicaci√≥n: ${lastValidLocation?.let { "‚úÖ" } ?: "‚ùå"}\n")
            append("üéØ Precisi√≥n actual: ${lastValidLocation?.accuracy?.let { "${String.format("%.1f", it)}m" } ?: "N/A"}\n")
            append("üèÉ Usuario en movimiento: ${if (isUserMoving()) "S√≠" else "No"}\n")
            append("üìä Lecturas estacionarias: $consecutiveStationaryCount/$maxStationaryCount\n")
            append("‚úÖ Lecturas v√°lidas consecutivas: $consecutiveValidReadings\n")
            append("üìà Buffer de suavizado: ${locationBuffer.size}/$SMOOTHING_WINDOW_SIZE\n")
            append("‚ùå Total rechazos desde √∫ltima aceptaci√≥n: $totalRejectedReadings\n")
            append("\n=== CONFIGURACI√ìN ===\n")
            append("üéØ Precisi√≥n m√≠nima: ${MIN_ACCURACY}m\n")
            append("üìè Distancia m√≠nima: ${MIN_DISTANCE_THRESHOLD}m\n")
            append("üèÉ Velocidad m√°xima: ${MAX_SPEED_THRESHOLD} km/h\n")
            append("‚è±Ô∏è Intervalo m√≠nimo: ${MIN_TIME_INTERVAL/1000}s\n")
            append("üõë Radio estacionario: ${STATIONARY_RADIUS}m\n")
            append("üìç Movimiento significativo: ${SIGNIFICANT_MOVEMENT_DISTANCE}m")
        }
    }
}

// FilterResult permanece igual
sealed class FilterResult {
    object REJECTED_LOW_ACCURACY : FilterResult()
    object REJECTED_TIME_INTERVAL : FilterResult()
    object REJECTED_SMALL_DISTANCE : FilterResult()
    object REJECTED_HIGH_SPEED : FilterResult()
    object REJECTED_STATIONARY : FilterResult()
    object ACCEPTED_FIRST_LOCATION : FilterResult()
    data class ACCEPTED_AND_SMOOTHED(val location: Location) : FilterResult()

    fun isAccepted(): Boolean = this is ACCEPTED_FIRST_LOCATION || this is ACCEPTED_AND_SMOOTHED

    fun getLocationData(): Location? = when (this) {
        is ACCEPTED_AND_SMOOTHED -> location
        else -> null
    }

    fun getResultDescription(): String = when (this) {
        is REJECTED_LOW_ACCURACY -> "‚ùå Rechazado: Baja precisi√≥n GPS"
        is REJECTED_TIME_INTERVAL -> "‚ùå Rechazado: Intervalo muy corto"
        is REJECTED_SMALL_DISTANCE -> "‚ùå Rechazado: Distancia insuficiente"
        is REJECTED_HIGH_SPEED -> "‚ùå Rechazado: Velocidad imposible"
        is REJECTED_STATIONARY -> "‚ùå Rechazado: Usuario estacionario"
        is ACCEPTED_FIRST_LOCATION -> "‚úÖ Aceptado: Primera ubicaci√≥n"
        is ACCEPTED_AND_SMOOTHED -> "‚úÖ Aceptado: Ubicaci√≥n v√°lida"
    }
}